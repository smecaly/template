AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  S3Bucket:
    Type: String
    Default: ''
  S3Key:
    Type: String
    Default: ''
Resources:
  LogRetention:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LogRetention
      Handler: "index.handler"
      Role: !GetAtt LambdaFunctionRole.Arn
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3Key
      Runtime: "nodejs12.x"
      Timeout: 300
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
      - PolicyName: lambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: 
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:PutRetentionPolicy
              - logs:CreateLogStream
              - logs:CreateLogGroup
              - logs:PutLogEvents
            Resource: '*'

  EventRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "EventRule"
      EventPattern: 
        source: 
          - "aws.logs"
        detail-type: 
          - "AWS API Call via CloudTrail"
        detail: 
          eventName:
            - "CreateLogGroup"
      State: "ENABLED"
      Targets: 
        - Arn: !GetAtt LogRetention.Arn
          Id: TargetFunctionV1
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: LogRetention
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventRule.Arn