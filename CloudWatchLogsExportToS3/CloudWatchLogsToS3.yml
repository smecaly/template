AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  logbucketName:
    Description: Provide a name for the destination log bucket
    Type: String
    Default: 'codebucket20222'
  logbucketprefix:
    Description: Provide a prefix for the destination log bucket
    Type: String
    Default: 'logs'
  S3CodeBucketName:
    Description: Provide the S3Codebucket Name
    Type: String
    Default: 'codebucket20222'
  S3CodeBucketKey:
    Description: Provide the S3Codebucket Key
    Type: String
    Default: 'cloudwatchlogstos3.zip'
  EventBridgeInputs:
    Description: 'Enter EventBridge inputs in key value Json format for Log bucket folder name, region and log bucket name using the pattern { "logFolderName": "","region": "" ,"s3BucketName": ""}'
    Type: String
    Default: '{ "logFolderName": "logs","region": "us-east-1" ,"s3BucketName": "codebucket20222"}'
  ScheduleExpression:
    Type: String
    Description: Enter the schedule for EventBridge rule. Ex rate(10 minutes)
    Default: rate(10 minutes)
Resources:
  LogexportFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Logexports3
      Handler: "index.handler"
      Role: !GetAtt LambdaFunctionRole.Arn
      Code:
        S3Bucket: !Ref S3CodeBucketName
        S3Key: !Ref S3CodeBucketKey
      Runtime: "nodejs12.x"
      Timeout: 300
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
      - PolicyName: lambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:PutRetentionPolicy
              - logs:CreateLogStream
              - logs:CreateLogGroup
              - logs:PutLogEvents
              - logs:CreateExportTask
              - logs:DescribeExportTasks
              - s3:PutBucketPolicy
              - s3:CreateBucket
              - s3:ListBucket
              - s3:ListAllMyBuckets
            Resource: '*'
  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - events.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSStepFunctionsReadOnlyAccess"
      Policies:
      - PolicyName: stepfunction
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
              - states:StopExecution
              - states:StartSyncExecution
            Resource: '*'
  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - states.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: StateMachine
      DefinitionSubstitutions:
        FunctionARN: !GetAtt LogexportFunction.Arn
      DefinitionString: |-
        {
          "StartAt": "CreateExportTask",
          "States": {
            "CreateExportTask": {
              "Type": "Task",
              "Resource": "${FunctionARN}",
              "Next": "IsAllLogsExported"
            },
            "IsAllLogsExported": {
              "Type": "Choice",
              "Choices": [
                {
                    "Variable": "$.continue",
                    "BooleanEquals": true,
                    "Next": "CreateExportTask"
                }
              ],
              "Default": "SuccessState"
            },
            "SuccessState": {
              "Type": "Succeed"
            }
          }
        }
      RoleArn: !GetAtt StepFunctionRole.Arn

  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventBridgeRule"
      ScheduleExpression: !Ref ScheduleExpression
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt StateMachine.Arn
          Id: TargetStepFunctionV1
          RoleArn: !GetAtt EventBridgeRole.Arn
          Input: !Ref EventBridgeInputs
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref logbucketName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetBucketAcl'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref logbucketName
            Principal:
              Service:
                - "logs.us-east-1.amazonaws.com"
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref logbucketName
                - /*
            Principal:
              Service:
                - "logs.us-east-1.amazonaws.com"
            Condition:
              StringEquals: 
                's3:x-amz-acl': 
                - 'bucket-owner-full-control'
