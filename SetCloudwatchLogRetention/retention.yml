--- 
AWSTemplateFormatVersion: "2010-09-09"
Parameters: 
  Retention:
    Description: "Valid values are: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 2192, 2557, 2922, 3288, 3653]"
    Default: "14"
    Type: String
Resources: 
  EventRule: 
    Properties: 
      Description: EventRule
      EventPattern: 
        detail: 
          eventName: 
            - CreateLogGroup
        detail-type: 
          - "AWS API Call via CloudTrail"
        source: 
          - aws.logs
      State: ENABLED
      Targets: 
        - 
          Arn: !GetAtt LogRetention.Arn
          Id: TargetFunctionV1
    Type: "AWS::Events::Rule"
  LambdaFunctionRole: 
    Properties: 
      RoleName: "LambdaRetentitonRole"
      AssumeRolePolicyDocument: 
        Statement: 
          - 
            Action: 
              - "sts:AssumeRole"
            Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Path: /
      Policies: 
        - 
          PolicyDocument: 
            Statement: 
              - 
                Action: 
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:PutRetentionPolicy"
                  - "logs:CreateLogStream"
                  - "logs:CreateLogGroup"
                  - "logs:PutLogEvents"
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: lambda
    Type: "AWS::IAM::Role"
  LogRetention: 
    Properties: 
      Code: 
        ZipFile: |
            const AWS = require('aws-sdk');
            const cloudwatchLogs = new AWS.CloudWatchLogs();
            function setRetentionOfCloudwatchLogGroup(logGroupName, duration) {
                let params = {
                    logGroupName : logGroupName,
                    retentionInDays: duration
                };
                return cloudwatchLogs.putRetentionPolicy(params).promise();
            }
            exports.handler = async (event) => {
                const logGroupName = event.logGroupName ? event.logGroupName : event.detail.requestParameters.logGroupName;
                const retention = process.env.Retention;
                try {
                    await setRetentionOfCloudwatchLogGroup(logGroupName, retention);
                    console.log('Retention has been set to ' + logGroupName + 'for the user given days');
                    return;
                } catch(error) {
                    console.error(error);
                    throw error;
                }
            };
      Environment: 
        Variables: 
          Retention: !Ref Retention
      FunctionName: LogRetention
      Handler: index.handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: nodejs12.x
      Timeout: 300
    Type: "AWS::Lambda::Function"
    DependsOn: LambdaFunctionRole
  PermissionForEventsToInvokeLambda: 
    Properties: 
      Action: "lambda:InvokeFunction"
      FunctionName: 
        Ref: LogRetention
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventRule.Arn
    Type: "AWS::Lambda::Permission"
